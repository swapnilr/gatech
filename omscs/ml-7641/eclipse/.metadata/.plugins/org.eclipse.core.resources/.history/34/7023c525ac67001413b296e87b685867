package edu.gatech.ml.assignment3;

import java.awt.BorderLayout;
import java.io.BufferedReader;
import java.io.FileReader;

import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.trees.J48;
import weka.clusterers.SimpleKMeans;
import weka.core.Instances;
import weka.core.converters.ArffLoader.ArffReader;
import weka.gui.treevisualizer.PlaceNode2;
import weka.gui.treevisualizer.TreeVisualizer;

public class FirstTest {

	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		SimpleKMeans m = new SimpleKMeans();
		m.setNumClusters(26);
		//Instances insts = new Instances(new FileReader("/Users/swapnilr/gatech/omscs/ml-7641/modifiedLetter.data"));
		//m.buildClusterer(insts);
		//for(int i=0; i < insts.size(); i++) {
		//	System.out.println(insts.get(i).classIndex());
		//}
		BufferedReader reader = new BufferedReader(new FileReader("/Users/swapnilr/gatech/omscs/ml-7641/letter.arff"));
		ArffReader arff = new ArffReader(reader);
		Instances data = arff.getData();
		data.setClassIndex(data.numAttributes() - 1);
		MultilayerPerceptron nn = new MultilayerPerceptron();
		nn.setLearningRate(0.3);
		nn.setTrainingTime(100);
		//nn.buildClassifier(data);
		//data.deleteAttributeAt(data.numAttributes() - 1);
		//
		J48 j = new J48();
		j.setConfidenceFactor((float) 0.25);
		j.setMinNumObj(2);
		j.buildClassifier(data);
		
		double correct = 0;
		for(int i=0; i < data.size(); i++) {
			if (j.classifyInstance(data.get(i)) == data.get(i).classValue()) {
				correct += 1;
			}
		}
		System.out.println(j.graphType());
		draw(j.graph());
		System.out.println(correct/data.size());
		//m.buildClusterer(data);
		//System.out.println(data.get(0).classValue());
		//System.out.println(m.clusterInstance(data.get(0)));
		//m.distributionForInstance(data.get(0));
	}
	
	public static void draw(String s) {
		final javax.swing.JFrame jf = 
	    	       new javax.swing.JFrame("Weka Classifier Tree Visualizer: J48");
	     jf.setSize(1000,800);
	     jf.getContentPane().setLayout(new BorderLayout());
	     TreeVisualizer tv = new TreeVisualizer(null, s, new PlaceNode2());
	    	     jf.getContentPane().add(tv, BorderLayout.CENTER);
	    	     jf.addWindowListener(new java.awt.event.WindowAdapter() {
	    	       public void windowClosing(java.awt.event.WindowEvent e) {
	    	         jf.dispose();
	    	       }
	    	     });
	    	 
	    	     jf.setVisible(true);
	    	     tv.fitToScreen();
	}

}
