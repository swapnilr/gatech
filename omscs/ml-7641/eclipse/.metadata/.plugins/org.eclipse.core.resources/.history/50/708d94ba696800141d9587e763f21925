package edu.gatech.ml.assignment3;

import java.io.BufferedReader;
import java.io.FileReader;

import weka.attributeSelection.AttributeSelection;
import weka.attributeSelection.InfoGainAttributeEval;
import weka.attributeSelection.Ranker;
import weka.clusterers.AbstractClusterer;
import weka.clusterers.EM;
import weka.clusterers.SimpleKMeans;
import weka.core.Instances;
import weka.core.converters.ArffLoader.ArffReader;

public class MainExperiment {

	public static void main(String[] args) {

		try {
			String[] filenames = new String[2];
			filenames[0] = "/Users/swapnilr/gatech/omscs/ml-7641/letter.arff";
			filenames[1] = "/Users/swapnilr/gatech/omscs/ml-7641/waveform-5000.arff";
			int[] sizes = new int[2];
			sizes[0] = 26;
			sizes[1] = 3;
			for(int i=0; i < filenames.length; i++) {
				
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//Both Datasets
		  // Nothing + 4 Dimensionality Reduction
		    // Clustering experiments - EM + K-means {Various possibilites for 1
		
		// Data Set 1
		  // 4 Dimensionality Reduction
		    // NN
		  // 2 Clustering Algorithms
		    // NN {Various possibilities}
		
		
		/*SimpleKMeans m = new SimpleKMeans();
		try {
			
			AttributeSelection filter = new AttributeSelection();  // package weka.filters.supervised.attribute!
			InfoGainAttributeEval eval = new InfoGainAttributeEval();
			Ranker r =new Ranker();
			r.setNumToSelect(10);
			//search.setSearchBackwards(true);
			filter.setEvaluator(eval);
			filter.setSearch(r);
			
			
			m.setNumClusters(26);
			BufferedReader reader = new BufferedReader(new FileReader("/Users/swapnilr/gatech/omscs/ml-7641/letter.arff"));
			ArffReader arff = new ArffReader(reader);
			Instances data = arff.getData();
			BufferedReader reader2 = new BufferedReader(new FileReader("/Users/swapnilr/gatech/omscs/ml-7641/letter.arff"));
			ArffReader arff2 = new ArffReader(reader2);
			Instances backupData = arff2.getData();
			backupData.setClassIndex(backupData.numAttributes() - 1);
			data.setClassIndex(data.numAttributes() - 1);
			
			filter.SelectAttributes(backupData);
			Instances newData = filter.reduceDimensionality(data);
			Instances newBackupData = filter.reduceDimensionality(backupData);
			newData.setClassIndex(-1);
			newData.deleteAttributeAt(newData.numAttributes() - 1);
			
			ClusteringExperiment exp = new ClusteringExperiment(m, 26);
			exp.setTiming(true);
			exp.setSet(newBackupData);
			exp.runExperiment(newData);
			
			m = new SimpleKMeans();
			m.setNumClusters(26);
			reader = new BufferedReader(new FileReader("/Users/swapnilr/gatech/omscs/ml-7641/letter.arff"));
			arff = new ArffReader(reader);
			data = arff.getData();
			reader2 = new BufferedReader(new FileReader("/Users/swapnilr/gatech/omscs/ml-7641/letter.arff"));
			arff2 = new ArffReader(reader2);
			backupData = arff2.getData();
			backupData.setClassIndex(backupData.numAttributes() - 1);
			data.deleteAttributeAt(newData.numAttributes() - 1);
			exp = new ClusteringExperiment(m, 26);
			exp.setTiming(true);
			exp.setSet(backupData);
			exp.runExperiment(data);
			
			
			/*m= new SimpleKMeans();
			m.setNumClusters(26);
			reader = new BufferedReader(new FileReader("/Users/swapnilr/gatech/omscs/ml-7641/waveform-5000.arff"));
			arff = new ArffReader(reader);
			data = arff.getData();
			data.deleteAttributeAt(data.numAttributes() - 1);
			reader2 = new BufferedReader(new FileReader("/Users/swapnilr/gatech/omscs/ml-7641/waveform-5000.arff"));
			arff2 = new ArffReader(reader2);
			backupData = arff2.getData();
			backupData.setClassIndex(backupData.numAttributes() - 1);
			exp = new ClusteringExperiment(m, 26);
			exp.setTiming(true);
			exp.setSet(backupData);
			exp.runExperiment(data);
			
			//m.buildClusterer(data);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		*/
	}
	
	public static void runBothClusteringExperiments(Instances trainingData, Instances validationData, int numLabels) throws Exception {
		AbstractClusterer[] clusterers = new AbstractClusterer[2];
		SimpleKMeans km = new SimpleKMeans();
		km.setNumClusters(numLabels);
		clusterers[0] = km;
		EM em = new EM();
		em.setNumClusters(numLabels);
		clusterers[0] = em;
		ClusteringExperiment exp;
		for(AbstractClusterer c: clusterers) {
			System.out.println("Running Experiment for " + c.getClass() + " with number of labels = " + numLabels);
			exp = new ClusteringExperiment(c, numLabels);
			exp.setTiming(true);
			exp.setSet(validationData);
			exp.runExperiment(trainingData);
		}
		
		
	}
	
	
	
}
